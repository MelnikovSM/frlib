MelnikovSM's FaceRecognizer Library Documentation

Copyright 2015 Melnikov Sergey, published under GNU GPLv2 (read at gnu.org)
Published at 4th December 2015 year at melnikovsm.tk (my home server)
IN CASE OF SOMETHING DON'T WORK OR IF YOU CAN SOMETHING SUGGEST, YOU CAN COMMUNICATE WITH ME USING VK.COM (vk.com/melnikovsm), OR USING COMMENTS ON MY BLOG (melnikovsm.tk)
Example programs sources are included in dir: capturePositive.py gentemplate.py recogn.py
Main library file: frlib.py

Available on English and on Russian ('cause this is my country language) languages

English:

Author notice:
Library (or, hope be honest, just case of functions) wroten by Melnikov Sergey, 14 full years after birth. Library wroten to simplificate my program for my project "Wonderful Creature Recognizer and Just Self-Wroten Song Player" (at the moment of library publication project not completed).

Library Description:

FR Lib - image library for Python, containing the basic functions needed for face recognition using OpenCV (just simplified OpenCV functions call, nothing more)..
The requirements for the operation: Python 2.7.X with a working module CV2 + Haar cascades (requires a file that was originally sought in the /usr/share/opencv/haarcascades/haarcascade_frontalface_alt.xml, it can be corrected on the 15th line).

Description of functions:

captureFrame([device]) - returns image CV2 and a string date snapshot, on input can accept video device number (default value 0)
Example of use: img, timestamp = frlib.captureFrame()
Example of use: img, timestamp = frlib.captureFrame(1)

cropFaces(img, [cascadePath]) - takes the input image CV2, looking at him face using an algorithm Haar Cascades (the second argument you can specify the path to another file) (default path can be changed on the 15th line), returns a list (array) with the cut from the image faces, if not find a single person returns None ..
Example of use: faces = frlib.cropFaces(img)
Example of use: faces = frlib.cropFaces(img, custom_haarcascade_path)

genTemplate (dir, file) - generates a template file (the file contain model, but I'm too lazy to rename all varribles, so what's important: It just works!) to recognize individuals at the input .. must be the path to the templates directory, as well as being the way in which the file will be saved template ..
Note: the path of the directory template should be cataloged as templates/DEFAULT, with "positive" individuals in the files of the $PATH/positive/positive_XXX.pgm, where XXX - number in the string in the value from 000 to 999
Example of use: frlib.genTemplate('templates/myface', 'templates/myface/template.xml')

createRecognizer(template) - creates and returns a function of facial recognition using template file template, let's say the function is written in the variable recogn:
recogn (face) - at input gets a picture CV2, returns uncertainty number (what the number is higher, then the more different the face of the template) in the type float, and the number of persons according to the pattern (in the generation using genTemplate "positive" person has the FID = 0) in the int
Example of use:
recogn = fr.createRecognizer('templates/myface/template.xml')
inconfidence, fid = recogn(face)

Russian:

От автора:
Библиотеку (ну или, вернее говоря набор функций) "накатал" (создал) Мельников Сергей, 14 полных лет, с целью упрощения работы своей программы для проекта "Распознаватель Чуда и Просто Аудио Открытка" (на момент публикации данной библиотеки проект ещо на стадии разработки).

Описание библиотеки:

FRLib - файл-библиотека для Python, содержащая базовые функции, необходимые для распознания лиц с использованием OpenCV.. (проста упрощение вызовов OpenCV)
Требования для функционирования: Python 2.7.X с работающим модулем CV2 + каскады Хаара (требуется файл, который изначально ищется в /usr/share/opencv/haarcascades/haarcascade_frontalface_alt.xml, можно поправить на 15ой строке).

Описание функций:

captureFrame([device]) - возвращает изображение CV2 и в виде строки дату создания снимка, на входе может принимать номер видео-устройства (по умолчанию 0)
Пример использования: img, timestamp = frlib.captureFrame()
Пример использования: img, timestamp = frlib.captureFrame(1)

cropFaces(img, [cascadePath]) - на входе принимает изображение CV2, ищет на нём лица используя алгоритм Каскадов Хаара (вторым аргументом можно указать путь к другому файлу) (стандартный путь можно изменить на 15 строке), возвращает список (массив) с вырезанными с изображения лицами, в случае, если не найдёт ни одного лица возвращает None..
Пример использования: faces = frlib.cropFaces(img)
Пример использования: faces = frlib.cropFaces(img, custom_haarcascade_path)

genTemplate(dir, file) - генерирует файл-шаблон (правильно канешн файл-модель, но пофг) для распознания лиц.. на входе должен быть путь к каталогу шаблона, а так-же путь, по которому будет сохранён файл-шаблон..
Внимание: по пути каталога шаблона должен быть каталог как templates/DEFAULT, с "положительными" лицами в файлах вида $PATH/positive/positive_XXX.pgm, где XXX - число внутри строки в значении от 000 до 999
Пример использования: frlib.genTemplate('templates/myface', 'templates/myface/template.xml')

createRecognizer(template) - создаёт и возвращает функцию распознания лиц (используется OpenCV FisherFaceRecognizer) используя файл-шаблон template, допустим функция будет записана в переменную recogn:
recogn(face) - на входе получает изображение CV2, возвращает значение неуверенности (чем это число больше, тем больше отличается лицо от шаблона) в типе float, и номер лица согласно шаблону (при генерации используя genTemplate "положительное" лицо имеет FID=0) в типе int

Пример использования:
recogn = fr.createRecognizer('templates/myface/template.xml')
inconfidence, fid = recogn(face)